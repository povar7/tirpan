This file contains description of MIR structure.
MIR stands for "Medium Intermediate Representation".
In this case it is mostly a Control Flow Graph.

For description of how some common Python constructs are represented in MIR
see *_mir.txt files.

Every MIR node is represented in Python code as an object of specific class
defined in ti.mir module. All these classes are descendants of either
ti.mir.MirNode or ti.mir.SerialMirNode class.

Every node describes an atomic action of program execution. Different actions
are represented by nodes of different classes. Every node has either "prev" or
"next" field (or both) which point to MIR nodes for previous and next actions
respectively. Most nodes also have fields specific to their class.

Variable names might be either real variable names from represented program or
internal names that represent variables that store intermediate computation
results. The latter start with "@" symbol and are assigned to only once on
any non-cyclic path.


When None is used as MIR node it represents an end of MIR chain.


ti.mir.MirNode
is the base class for all nodes. They have neither "next" nor
"prev" fields so no nodes of this class exist (only of its descendant classes).

ti.mir.HasNextMirNode
is the base class for nodes that have ordinary "next" field.
It is derived from MirNode class.

ti.mir.HasPrevMirNode
is the base class for nodes that have ordinary "prev" field.
It is derived from MirNode class.
The most common example is ti.mir.IfMirNode which has "true" and
"false" fields instead of "next".

ti.mir.SerialMirNode
is the base class for nodes that have both ordinary "prev" and "next" fields.
It is derived from both HasNextMirNode and HasPrevMirNode classes.
Most nodes belong to that class.

ti.mir.JoinMirNode
represents a starting point of linear MIR chain. It stands for no action
itself. Its "prev" field is (instead of an ordinary link) a set of all nodes
that have their "next" field pointing to it.
It is perfectly valid if this list is empty (e.g. function entry point).
It is derived from HasNextMirNode.

ti.mir.IfMirNode
represents branching on condition. Field "cond" is a name of variable that
stores branching condition. Complex conditions are computed beforehand or
represented by many IF nodes. Execution continues from node pointed by "true"
field if condition value is True and by "false" field otherwise.
It is derived from HasPrevMirNode.
